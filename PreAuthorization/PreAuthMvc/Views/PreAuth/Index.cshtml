@model PreAuthMvc.Models.PreAuthViewModel
@{
    ViewBag.Title = "Index";
    Layout = "~/Views/Shared/_ContentLayout.cshtml";
}
<div class="right_content">
    <input type="hidden" id="sessionUUID" name="sessionUUID" value='@ViewData["sessionUUID"]'>
    @using (Html.BeginForm())
    {
            <div class="list_header">
                预授权管理
                <div class="top_m_l"></div>
                <div class="top_m_r"></div>
            </div>
    <input type="hidden" value='@ViewData["adminUserName"]' name="adminUserName" id="adminUserName">
            <table cellspacing="0" cellpadding="0" width="100%" border="0" class="t-form">
                <tbody>
                    <tr>
                        <td class="lbl">@Html.LabelFor(model => model.ActivityTypeCode) </td>
                        <td>
                            @Html.DropDownListFor(model => model.ActivityTypeCode, ViewData["activityTypeList"] as List<SelectListItem>)
                            <span class="red_mark">*</span><span id="ActivityTypeCodeTip"></span>
                        </td>
                        <td class="lbl">@Html.LabelFor(model => model.ActivityLevelCode) </td>
                        <td>
                            @Html.DropDownListFor(model => model.ActivityLevelCode, ViewData["activityLevelList"] as List<SelectListItem>)
                            <span class="red_mark">*</span><span id="ActivityLevelCodeTip"></span>
                        </td>
                    </tr>
                    <tr>
                        <td class="lbl">@Html.LabelFor(model => model.CommodityName) </td>
                        <td>
                            <input type="text" maxlength="20" autocomplete="off" class="txt" value='@Html.ValueFor(model => model.CommodityName)' name="CommodityName" id="CommodityName">
                            <span class="red_mark">*</span><span id="CommodityNameTip"></span>
                        </td>
                        <td class="lbl">@Html.LabelFor(model => model.Quantity) </td>
                        <td>
                            <input type="text" maxlength="1" autocomplete="off" class="txt" value='@Html.ValueFor(model => model.Quantity)' name="Quantity" id="Quantity">
                            <span class="red_mark">*</span><span id="QuantityTip"></span>
                        </td>
                    </tr>
                    <tr>
                        <td class="lbl">@Html.LabelFor(model => model.TelNumber) </td>
                        <td>
                            <input type="text" maxlength="11" autocomplete="off" class="txt" value='@Html.ValueFor(model => model.TelNumber)' name="TelNumber" id="TelNumber">
                            <span class="red_mark">*</span><span id="TelNumberTip"></span>
                        </td>
                        <td class="lbl">@Html.LabelFor(model => model.CustomerName) </td>
                        <td>
                            <input type="text" maxlength="11" autocomplete="off" class="txt" value='@Html.ValueFor(model => model.CustomerName)' name="CustomerName" id="CustomerName">
                            <span class="red_mark">*</span><span id="CustomerNameTip"></span>
                        </td>
                    </tr>
                    <tr>
                        <td class="lbl">@Html.LabelFor(model => model.CustomerIdNo) </td>
                        <td>
                            <input type="text" maxlength="22" autocomplete="off" class="txt" value='@Html.ValueFor(model => model.CustomerIdNo)' name="CustomerIdNo" id="CustomerIdNo">
                            <span class="red_mark">*</span><span id="CustomerIdNoTip"></span>
                        </td>
                        <td class="lbl">@Html.LabelFor(model => model.BankCardTypeCode)</td>
                        <td>
                            @Html.DropDownListFor(model => model.BankCardTypeCode, ViewData["bankCardTypeList"] as List<SelectListItem>)
                            @Html.ValidationMessageFor(model => model.BankCardTypeCode)
                            <span class="red_mark">*</span><span id="BankCardTypeCodeTip"></span>
                        </td>
                    </tr>
                    <tr>
                        <td class="lbl">@Html.LabelFor(model => model.BankCardNo)</td>
                        <td>
                            <input type="text" maxlength="20" autocomplete="off" class="txt" value='@Html.ValueFor(model => model.BankCardNo)' name="BankCardNo" id="BankCardNo">
                            <span class="red_mark">*</span><span id="BankCardNoTip"></span>
                        </td>
                        <td class="lbl">@Html.LabelFor(model => model.BankCardNoConfirm)</td>
                        <td>
                            <input type="text" maxlength="20" autocomplete="off" class="txt" value='@Html.ValueFor(model => model.BankCardNoConfirm)' name="BankCardNoConfirm" id="BankCardNoConfirm">
                            <span class="red_mark">*</span><span id="BankCardNoConfirmTip"></span>
                        </td>
                    </tr>
                    <tr>
                        <td class="lbl">@Html.LabelFor(model => model.BankCardCvn2)</td>
                        <td>
                            <input type="text" maxlength="3" autocomplete="off" class="txt" value='@Html.ValueFor(model => model.BankCardCvn2)' name="BankCardCvn2" id="BankCardCvn2">
                            <span class="red_mark">*</span><span id="BankCardCvn2Tip"></span>
                        </td>
                        <td class="lbl">@Html.LabelFor(model => model.BackCardExpire)</td>
                        <td>
                            <input type="text" maxlength="4" autocomplete="off" class="txt" value='@Html.ValueFor(model => model.BackCardExpire)' name="BackCardExpire" id="BackCardExpire">
                            <span class="red_mark">*</span><span id="BackCardExpireTip"></span>
                        </td>
                    </tr>
                    <tr>
                        <td class="lbl">@Html.LabelFor(model => model.GuaranteeAmount)</td>
                        <td>
                            <input type="text" maxlength="8" autocomplete="off" class="txt" value='@Html.ValueFor(model => model.GuaranteeAmount)' name="GuaranteeAmount" id="GuaranteeAmount">
                            <span class="red_mark">*</span><span id="GuaranteeAmountTip"></span>
                        </td>
                        <td class="lbl">@Html.LabelFor(model => model.BuyPhoneDate)</td>
                        <td>
                            <input name="BuyPhoneDate" class="txt w105p Wdate" id="BuyPhoneDate" onclick="WdatePicker({dateFmt:'yyyy/MM/dd'})" type="text">
                            <span class="red_mark">*</span><span id="BuyPhoneDateTip"></span>
                        </td>
                    </tr>
                    <tr>
                        <td class="lbl">@Html.LabelFor(model => model.ExpiryDate)</td>
                        <td>
                            <input name="ExpiryDate" class="txt w105p Wdate" id="ExpiryDate" onclick="WdatePicker({dateFmt:'yyyy/MM/dd'})" type="text">
                            <span class="red_mark">*</span><span id="ExpiryDateTip"></span>
                        </td>
                        <td class="lbl">@Html.LabelFor(model => model.AgreementDate)</td>
                        <td>
                            <input name="AgreementDate" class="txt w105p Wdate" id="AgreementDate" onclick="WdatePicker({dateFmt:'yyyy/MM/dd'})" type="text">
                            <span class="red_mark">*</span><span id="AgreementDateTip"></span>
                        </td>
                    </tr>
                </tbody>
            </table>
            <div class="btn_line">
                <input type="button" id="okBtn" value="确定" class="btn_blue" />
            </div>
    }
</div>
<script type="text/javascript">
    upms.history.go("cancelBtn"); // 取消按钮
    upms.handlebtn.submit({
// 确定batch
        btnid: "okBtn",
        url: '@Url.Action("SubmitAdd", "PreAuth")',
        params: [
            { name: "ActivityTypeCode", targetid: "ActivityTypeCode", type: "select" },
            { name: "ActivityLevelCode", targetid: "ActivityLevelCode", type: "select" },
            { name: "TelNumber", targetid: "TelNumber", type: "text" },
            { name: "CustomerName", targetid: "CustomerName", type: "text" },
            { name: "CustomerIdNo", targetid: "CustomerIdNo", type: "text" },
            { name: "BankCardTypeCode", targetid: "BankCardTypeCode", type: "select" },
            { name: "BankCardNo", targetid: "BankCardNo", type: "text" },
            { name: "BankCardNoConfirm", targetid: "BankCardNoConfirm", type: "text" },
            { name: "BankCardCvn2", targetid: "BankCardCvn2", type: "text" },
            { name: "GuaranteeAmount", targetid: "GuaranteeAmount", type: "text" },
            { name: "MarketingSerialNum", targetid: "MarketingSerialNum", type: "text" },
            { name: "BuyPhoneDate", targetid: "BuyPhoneDate", type: "text" },
            { name: "ExpiryDate", targetid: "ExpiryDate", type: "text" },
            { name: "AgreementDate", targetid: "AgreementDate", type: "text" },
            { name: "CommodityName", targetid: "CommodityName", type: "text" },
            { name: "Quantity", targetid: "Quantity", type: "text" },
            { name: "BackCardExpire", targetid: "BackCardExpire", type: "text" }
        ],
        validate: {
            model: "batch",
            params: [
                {targetid: "ActivityTypeCode",type: "select",infoid: "ActivityTypeCodeTip",checkarray: [{ falsetip: "活动类型不能为空!", oncheck: upms.checkUtils.isNotEmptyStr }]},
                { targetid: "TelNumber", type: "text", infoid: "TelNumberTip", falsetip: "手机号码填写不正确!", oncheck: checkMPhone },
                { targetid: "CustomerName", type: "text", infoid: "CustomerNameTip", falsetip: "客户姓名不能为空!", oncheck: upms.checkUtils.isNotEmptyStr },
                { targetid: "GuaranteeAmount", type: "text", infoid: "GuaranteeAmountTip", oncheck: checkAmt, falsedesc: "金额格式不正确!" }
            ]
        }
    });

    // 校验手机号码
    function checkMPhone(str) {
        if (upms.checkUtils.isNotEmptyStr(str)) {
            return upms.checkUtils.isMobilePhone(str);
        } else {
            return false;
        }
    }
    //校验金额
    function checkAmt() {
        //金额格式
        var beAmt = $("#GuaranteeAmount").val();
        if (!upms.checkUtils.isEmptyStr(beAmt)) {
            if (upms.checkUtils.isChinese(beAmt)) {
                return false;
            }
            if(!upms.checkUtils.isMoney($.trim(beAmt))){
                return false;
            }
        }
    }
</script>

@*
    查询页的js

    $(".show_more").bind("click",function(){
        $(".more").show();
        $(this).hide();
    });
    $(".hide_more").bind("click",function(){
        $(".more").hide();
        $(".show_more").show();
    });

    var url = "/omer/TXNQRY/currdate!queryCurrDateTxn.action";
    var checkParam = {
            type:"binding",
            callbackFlag:true,
            checkOrderNum:function(){
                //订单号
                var order = $("#orderNum").val();
                if(!upms.checkUtils.isEmptyStr(order)){
                    if(upms.checkUtils.isChinese(order)){
                        return false;
                    }
                }
            },
            checkTransNum:function(){
                //交易流水号
                var tranNum = $("#transNum").val();
                if(!upms.checkUtils.isEmptyStr(tranNum)){
                    if(upms.checkUtils.isChinese(tranNum)){
                        return false;
                    }
                }
            },
            checkBeginAmtIsCn:function(){
                //金额下限不能为中文
                var beAmt = $("#beginAmt").val();
                if(!upms.checkUtils.isEmptyStr(beAmt)){
                    if(upms.checkUtils.isChinese(beAmt)){
                        return false;
                    }
                }
            },
            checkBeginAmt:function(){
                //金额下限格式
                var beAmt = $("#beginAmt").val();
                if(!upms.checkUtils.isEmptyStr(beAmt)){
                    if(!upms.checkUtils.isMoney($.trim(beAmt))){
                        return false;
                    }
                }
            },
            checkEndAmtIsCn:function(){
                //金额上限 是否中文
                var enAmt = $("#endAmt").val();
                if(!upms.checkUtils.isEmptyStr(enAmt)){
                    if(upms.checkUtils.isChinese(enAmt)){
                        return false;
                    }
                }
            },
            checkEndAmt:function(){
                //金额上限格式
                var enAmt = $("#endAmt").val();
                if(!upms.checkUtils.isEmptyStr(enAmt)){
                    if(!upms.checkUtils.isMoney($.trim(enAmt))){
                        return false;
                    }
                }
            },
            checkBeginAmtAndEndAmt:function(){
                //金额下限不能大于金额上限
                var enAmt = $("#endAmt").val();
                var beAmt = $("#beginAmt").val();
                beAmt = $.trim(beAmt);
                enAmt = $.trim(enAmt);
                if(upms.checkUtils.formatToFen(beAmt) > upms.checkUtils.formatToFen(enAmt)){
                    return false;
                }
            },
            checkStartAndEndTransTm:function(){
                var betime = $("#startTm").val();
                var entime = $("#endTm").val();
                if(!upms.checkUtils.isEmptyStr(betime) && !upms.checkUtils.isEmptyStr(entime)){
                    betime = betime.split(":")[0]+betime.split(":")[1]+betime.split(":")[2];
                    entime = entime.split(":")[0]+entime.split(":")[1]+entime.split(":")[2];
                    if(betime > entime){
                        return false;
                    }
                }
            },
            checkOrgOrderNum:function(){
                //原订单号 是否中文
                var orgOrder = $("#orgOrderNum").val();
                if(!upms.checkUtils.isEmptyStr(orgOrder)){
                    if(upms.checkUtils.isChinese(orgOrder)){
                        return false;
                    }
                }
            },
            checkOrgOrderNumNotNull:function(){
                //若输入原交易时间，则原交易订单号为必输
                var orgOrder = $("#orgOrderNum").val();
                var orgOrderDt = $("#orgOrderDate").val();
                if(!upms.checkUtils.isEmptyStr(orgOrderDt)){
                    if(upms.checkUtils.isEmptyStr(orgOrder)){
                        return false;
                    }
                }
            },
            checkOrgOrgOrderTmNotNull:function(){
                //若输入原交易订单号，则原交易时间为必输
                var orgOrder = $("#orgOrderNum").val();
                var orgOrderDt = $("#orgOrderDate").val();
                if(!upms.checkUtils.isEmptyStr(orgOrder)){
                    if(upms.checkUtils.isEmptyStr(orgOrderDt)){
                        return false;
                    }
                }
            },
            checkRespCodeIsCn:function(){
                //应答码
                var rspCd = $("#respCode").val()
                if(!upms.checkUtils.isEmptyStr(rspCd)){
                    if(upms.checkUtils.isChinese(rspCd)){
                        return false;
                    }
                }
            },
            checkRespCode:function(){
                //交易应答码不能包含全角字符
                var rspCd = $("#respCode").val()
                if(!upms.checkUtils.isEmptyStr(rspCd)){
                    if(upms.checkUtils.isW(rspCd)){
                        return false;
                    }
                }
            },
            checkSysTransNum:function(){
                //系统跟踪号
                var sysTNum = $("#sysTransNum").val();
                if(!upms.checkUtils.isEmptyStr(sysTNum)){
                    if(upms.checkUtils.isChinese(sysTNum)){
                        return false;
                    }
                }
            },
            checkBankOrder:function(){
                //银行订单号
                var border = $("#bankOrder").val();
                if(!upms.checkUtils.isEmptyStr(border)){
                    if(upms.checkUtils.isChinese(border)){
                        return false;
                    }
                }
            },
            checkSortTwo:function(){
                //选择第二顺序 必须先选择第一顺序
                var sortOne = $("#sortOne").val();
                var sortTwo = $("#sortTwo").val();
                if(upms.checkUtils.isEmptyStr(sortOne)){
                    if(!upms.checkUtils.isEmptyStr(sortTwo)){
                        return false;
                    }
                }
            },
            checkSortSample:function(){
                //选择第二顺序 必须先选择第一顺序
                var sortOne = $("#sortOne").val();
                var sortTwo = $("#sortTwo").val();
                if(!upms.checkUtils.isEmptyStr(sortOne) && !upms.checkUtils.isEmptyStr(sortTwo)){
                    if(sortTwo == sortOne){
                        return false;
                    }
                }
            }
    };

    var validParam = [
    {targetid:"orderNum",type:"text",oncheck:checkParam.checkOrderNum,falsedesc:"订单号不能包含中文!"},
    {targetid:"transNum",type:"text",oncheck:checkParam.checkTransNum,falsedesc:"交易流水号不能包含中文!"},
    {targetid:"beginAmt",type:"text",oncheck:checkParam.checkBeginAmtIsCn,falsedesc:"金额下限不能包含中文!"},
    {targetid:"beginAmt",type:"text",oncheck:checkParam.checkBeginAmt,falsedesc:"金额下限格式错误!"},
    {targetid:"endAmt",type:"text",oncheck:checkParam.checkEndAmtIsCn,falsedesc:"金额上限不能包含中文!"},
    {targetid:"endAmt",type:"text",oncheck:checkParam.checkEndAmt,falsedesc:"金额上限格式错误!"},
    {targetid:"endAmt",type:"text",oncheck:checkParam.checkBeginAmtAndEndAmt,falsedesc:"金额下限不能大于金额上限!"},
    {targetid:"startTm",type:"text",oncheck:checkParam.checkStartAndEndTransTm,falsedesc:"交易开始时间不能大于交易结束时间!"},
    {targetid:"orgOrderNum",type:"text",oncheck:checkParam.checkOrgOrderNum,falsedesc:"原交易订单号不能包含中文!"},
    {targetid:"orgOrderNum",type:"text",oncheck:checkParam.checkOrgOrderNumNotNull,falsedesc:"若输入原交易 时间，则原交易订单号为必输!"},
    {targetid:"orgOrderTm",type:"text",oncheck:checkParam.checkOrgOrgOrderTmNotNull,falsedesc:"若输入原交易订单号，则原交易时间为必输!"},
    {targetid:"respCode",type:"text",oncheck:checkParam.checkRespCodeIsCn,falsedesc:"交易应答码不能包含中文!"},
    {targetid:"respCode",type:"text",oncheck:checkParam.checkRespCode,falsedesc:"交易应答码不能包含全角字符!"},
    {targetid:"sysTransNum",type:"text",oncheck:checkParam.checkSysTransNum,falsedesc:"系统跟踪号不能包含中文!"},
    {targetid:"bankOrder",type:"text",oncheck:checkParam.checkBankOrder,falsedesc:"银行订单号不能包含中文!"},
    {targetid:"sortTwo",type:"text",oncheck:checkParam.checkSortTwo,falsedesc:"若选择第二排序,则第一排序必选"},
    {targetid:"sortTwo",type:"text",oncheck:checkParam.checkSortSample,falsedesc:"第一排序和第二排序不能相同"}
    ];

    upms.pagequery.verifyExecute({
        reqtype:"post",
        queryformid:"_currDateQufrm",
        querybtnid:"queryBtn",
        validate:validParam,
        errinfoid:"_uniformErrTip",
        queryurl:"/omer/TXNQRY/currdate!queryCurrDateTxn.action",
        resultdivid:"resultDiv"
    });

    //upms.query("queryBtn", url, data,checkParam);// 查询按钮
    $(document).ready(function(){
    var myDate = new Date();
    var h =myDate.getHours()+"";
    var m = myDate.getMinutes()+1+"";
    var s = myDate.getSeconds()+"";

    h = h.length == 1?"0"+h:h;
    m = m.length == 1?"0"+m:m;
    s = s.length == 1?"0"+s:s;

    var beginD = "00:00:00";
    var endD = h+":"+m+":"+s;

    $("#startTm").val(beginD);
    $("#endTm").val(endD);
    });



*@
 